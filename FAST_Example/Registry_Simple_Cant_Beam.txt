##################################################################################################################################
# Registry for Simple_Cant_Beam, creates MODULE Simple_Cant_Beam_Types
# Module Simple_Cant_Beam_Types contains all of the user-defined types needed in Simple_Cant_Beam. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################

# ..... Initialization data .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef Simple_Cant_Beam/SCBeam InitInputType CHARACTER(1024) InputFile - - - "Name of the input file; remove if there is no file" -
typedef      ^              ^      IntKi  verif    - - -  "flag to indicate if verification is being peformed" -
typedef      ^              ^      IntKi  num_elem - - -  "number of spectral elements spanning length" -
typedef      ^              ^      IntKi  order    - - -  "order of spectral elements; order+1 nodes per element" -

# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef Simple_Cant_Beam/SCBeam InitOutputType Reki DummyInitVar - - - "A variable" -

# ..... States ....................................................................................................................
# Define continuous (differentiable) states here:
typedef Simple_Cant_Beam/SCBeam ContinuousStateType ReKi q        {:} - -  "transverse displacement" m 
typedef      ^                       ^             ^   dqdt     {:} - -  "transverse velocity" m/s

# Define discrete (nondifferentiable) states here:
typedef Simple_Cant_Beam/SCBeam SCBeam_DiscreteStateType ReKi DummyDiscState - - - "A variable, Replace if you have discrete states" -

# Define constraint states here:
typedef Simple_Cant_Beam/SCBeam ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
typedef Simple_Cant_Beam/SCBeam OtherStateType SCBeam_ContinuousStateType  xdot  {:} - - "previous state derivs for m-step time integrator"  -
typedef      ^             ^        IntKi n   - - - "tracks time step for which OtherState was updated last" -

# ..... Parameters ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:
typedef Simple_Cant_Beam/SCBeam ParameterType ReKi   dens     - - -  "density" kg/m^3
typedef      ^              ^       ^     A        - - -  "beam cross sectional area" m^2 
typedef      ^              ^       ^     G        - - -  "beam shear modulus" -
typedef      ^              ^       ^     poisson  - - -  "beam Poisson ratio" -
typedef      ^              ^       ^     E        - - -  "beam Young's Modulus" Pa
typedef      ^              ^      IntKi  num_elem  - - -  "number of elements spanning length" -
typedef      ^              ^       ^     num_nodes - - -  "number of nodes" -
typedef      ^              ^       ^     order   - - -  "polynomial order of spectral elements" -
typedef      ^              ^       ^     dof_per_node - - -  "dof per node (2: w and theta)" -
typedef      ^              ^       ^     num_dof - - -  "total dof" -
typedef      ^              ^      ReKi   pos    {:} - - "horizatonal position of nodes in reference configuration" m
typedef      ^              ^       ^     xl      - - -  "left-most node location" -
typedef      ^              ^       ^     xr      - - -  "right-most node location" -
typedef      ^              ^       ^     gll_w  {:} - - "gauss-legendre-lobatto weights" -
typedef      ^              ^       ^     gll_p  {:} - - "gauss-legendre-lobatto points" -
typedef      ^              ^       ^     det_jac {:} - - "determinant of transformation jacobian for each element" m
typedef      ^              ^      IntKi  bc     {:} - - "boundary-condition vector" -
typedef      ^              ^      ReKi   m_diag {:} - - "diagonal mass matrix" -
typedef      ^              ^      ReKi   stiff {:}{:}{:} "element stiffness matrices" -
typedef      ^              ^       ^     gll_deriv  {:}{:}- "gll derivative tensor" -
typedef      ^              ^      DbKi   dt      - - -  "module dt" s
typedef      ^              ^      IntKi  method  - - -  "integration method: 1-RK4, 2-AB4, 3-ABM4" -
typedef      ^              ^      IntKi  verif  - - -  "verification flag" -

# ..... Inputs ....................................................................................................................
# Define inputs that are not on this mesh here:
typedef Simple_Cant_Beam/SCBeam    InputType  MeshType  PointMesh - - - "" -
typedef Simple_Cant_Beam/SCBeam    InputType  MeshType  Line2Mesh  - - - "" -

# ..... Outputs ...................................................................................................................
# Define outputs that are contained on the mesh here:
typedef Simple_Cant_Beam/SCBeam    OutputType  MeshType  Line2Mesh - - - "" -
