##################################################################################################################################
# Registry for Module1, creates MODULE Module1_Types
# Module Module1_Types contains all of the user-defined types needed in Module1. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################

# ..... Initialization data
# .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BD InitInputType CHARACTER(1024) InputFile - - - "Name of the input file; remove if there is no file" -

# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BD InitOutputType Reki DummyInitVar - - - "A variable" -

# ..... States
# ....................................................................................................................
# Define continuous (differentiable) states here:
typedef BeamDyn/BD ContinuousStateType ReKi q        {:} - - "q - displacement of Mass 1" m
typedef      ^              ^             ^   dqdt     {:} - -  "dqdt - velocity of Mass 1" m/s

# Define discrete (nondifferentiable) states here:
typedef BeamDyn/BD BDyn_DiscreteStateType ReKi DummyDiscState - - - "A variable, Replace if you have discrete states" -

# Define constraint states here:
typedef BeamDyn/BD ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
typedef BeamDyn/BD OtherStateType ReKi DummyOtherState  - - - "A variable, replace if you have Other States"

# ..... Parameters
# ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:

typedef BeamDyn/BD ParameterType ReKi   uuN0      {:} - -  "Initial Postion Vector" -
typedef      ^              ^       ^     Stif0     {:}{:}{:}  - -  "Sectional Stiffness Properties at each node" -
typedef      ^              ^       ^     m00       {:} - -  "Sectional Mass density per unit span at each node" -
typedef      ^              ^       ^     mEta0     {:}{:} - -  "Sectional m\Eta_0 at each node" -
typedef      ^              ^       ^     rho0      {:}{:}{:}  - -  "Sectional tensor of inertia per unit span" -
typedef      ^              ^     IntKi   node_elem - - -  "Node per element" -
typedef      ^              ^       ^     dof_node  - - -  "dof per node" -
typedef      ^              ^       ^     elem_total  - - -  "Total number of elements" -
typedef      ^              ^       ^     node_total  - - -  "Total number of nodes" -
typedef      ^              ^       ^     dof_total  - - -  "Total number of dofs" -
typedef      ^              ^       ^     ngp  - - -  "Number of Gauss points" -
typedef      ^              ^      DbKi   dt     - - -  "module dt" s
# ..... Inputs
# ....................................................................................................................
# Define inputs that are not on this mesh here:
typedef BeamDyn/BD   InputType  MeshType  PointMesh - - - "contains motion" -
#typedef Module1/Mod1    InputType  ReKi       fc   - - - "coupling force" N

# ..... Outputs
# ...................................................................................................................
# Define outputs that are contained on the mesh here:
typedef BeamDyn/BD   OutputType  MeshType  PointMesh - - - "contains force and moments" -
#typedef Module1/Mod1   OutputType  MeshType  PointMesh - - - "contains displacement and velocity" -
#typedef Module1/Mod1   OutputType ReKi   q      - - - "displacement of Mass 1" m
#typedef     ^              ^       ^     dqdt   - - - "velocity of Mass 1" m/s
