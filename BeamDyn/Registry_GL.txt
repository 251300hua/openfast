##################################################################################################################################
# Registry for BeamDyn, creates MODULE BeamDyn_Types
# Module BeamDyn_Types contains all of the user-defined types needed in BeamDyn. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################

# ..... Initialization data .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BD InitInputType CHARACTER(1024) InputFile - - - "Name of the input file; remove if there is no file" -
typedef BeamDyn/BD InitInputType CHARACTER(1024) RootName  - - - "RootName for writing output files" -

# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BD InitOutputType ReKi DummyInitVar - - - "A variable" -

# ..... States ....................................................................................................................
# Define continuous (differentiable) states here:
typedef BeamDyn/BD ContinuousStateType ReKi uuNf      {:} - -  "nodal displacements and rotations" - 

# Define discrete (nondifferentiable) states here:
typedef BeamDyn/BD BD_DiscreteStateType ReKi DummyDiscState - - - "A variable, Replace if you have discrete states" -

# Define constraint states here:
typedef BeamDyn/BD ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
typedef BeamDyn/BD OtherStateType BD_ContinuousStateType  xdot  {:} - - "previous state derivs for m-step time integrator"  -
typedef      ^             ^        IntKi n   - - - "tracks time step for which OtherState was updated last" -
typedef BeamDyn/BD OtherStateType ReKi uuNf     {:} - - "Nodal displacements and rotations" -
typedef BeamDyn/BD OtherStateType ReKi RootForce     {:} - - "Nodal displacements and rotations" -

# ..... Parameters ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:
typedef BeamDyn/BD ParameterType ReKi Stif0_GL {:}{:}{:} - "beam stiffness constants" -
typedef BeamDyn/BD ParameterType ReKi Mass0_GL {:}{:}{:} - "beam mass constants" -
typedef BeamDyn/BD ParameterType ReKi Stif0_N1 {:}{:} - "beam stiffness constants at root (Node 1)" -
typedef      ^            ^       ^     member_length   {:}{:} - -  "Array stored length of each member" -
typedef      ^            ^       ^     segment_length   {:}{:} - -  "Array stored length of each segment" -
typedef BeamDyn/BD ParameterType ReKi   gravity   {:} - -  "Gravitational acceleration" m/s^2
typedef      ^            ^       ^     blade_length     - - -  "Blade Length" -
typedef   ^          ^        IntKi elem_total - - - "number of elements" -
typedef   ^          ^          ^   dof_node - - - "dof per node (6)" -
typedef   ^          ^          ^   node_total - - - "number of nodes" -
typedef   ^          ^          ^   dof_total  - - - "total dof" -
typedef   ^          ^          ^   node_elem  - - - "total dof" -
typedef   ^          ^          ^   niter  - - - "total dof" -
typedef   ^          ^          ^   ngp  - - - "total dof" -
typedef   ^          ^          ^   piter - - - "dummy for iteration count" -
typedef      ^            ^       ^     analysis_type  - - -  "analysis_type flag" -
typedef   ^          ^         ReKi  uuN0 {:}{:} - - "reference position vector" -
typedef   ^          ^          ^    bc {:} - - "Boundary condition vector" -
typedef   ^          ^          ^    F_ext {:} - - "Applied force vector" -
typedef      ^            ^      DbKi   dt     - - -  "module dt" s

# ..... Inputs ....................................................................................................................
# Define inputs that are not on this mesh here:
typedef BeamDyn/BD    InputType  MeshType  PointMesh - - - "" -

# ..... Outputs ...................................................................................................................
# Define outputs that are contained on the mesh here:
typedef BeamDyn/BD    OutputType  MeshType  PointMesh - - - "" -

# ..... Blade Input file data........................................................................
typedef BeamDyn/BD    BladeInputData    IntKi    station_total    -     -     -    "Number of blade input stations"
typedef BeamDyn/BD    BladeInputData    IntKi    format_index     -     -     -    "Number of blade input stations"
typedef BeamDyn/BD    BladeInputData    ReKi     station_eta     {:}    -     -    "Station location in eta [0,1]"
typedef BeamDyn/BD    BladeInputData    ReKi     IniTwist_eta    {:}    -     -    "Station location in eta [0,1]"
typedef BeamDyn/BD    BladeInputData    ReKi     stiff0       {:}{:}{:} -     -    "C/S stiffness matrix arrays"
typedef BeamDyn/BD    BladeInputData    ReKi     mass0        {:}{:}{:} -     -    "C/S mass matrix arrays"
# ..... Input file data..............................................................................
# This is data defined in the Input File for this module (or could otherwise be passed in)
# ..... Primary Input file data......................................................................
typedef BeamDyn/BD    BD_InputFile    IntKi    analysis_type    - - - "Analysis Type: 0-Rigid, 1-Static, 2-Dynamic" -
typedef BeamDyn/BD    BD_InputFile    IntKi    member_total    - - - "Total number of members" -
typedef BeamDyn/BD    BD_InputFile    IntKi    kp_total         - - - "Total number of key point" -
typedef BeamDyn/BD    BD_InputFile    IntKi    kp_member       {:} - - "Total number of key point" -
typedef BeamDyn/BD    BD_InputFile    IntKi    order_elem    - - - "Order of interpolation (basis) function" -
typedef BeamDyn/BD    BD_InputFile    ReKi     kp_coordinate    {:}{:} - - "Key point coordinates array" -
typedef BeamDyn/BD    BD_InputFile    ReKi     initial_twist    {:} - - "Key point coordinates array" -
typedef BeamDyn/BD    BD_InputFile    BladeInputData    InpBl    -  - - "Input data for individual blades"   "see BladeInputData Type"
typedef BeamDyn/BD    BD_InputFile    CHARACTER(1024) BldFile   -  -  -  "Name of blade input file"
typedef BeamDyn/BD    BD_InputFile    Logical  Echo             - - -  "Echo"
