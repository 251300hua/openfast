##################################################################################################################################
# Registry for BeamDyn, creates MODULE BeamDyn_Types
# Module BeamDyn_Types contains all of the user-defined types needed in BeamDyn. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################

# ..... Initialization data .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BDyn InitInputType CHARACTER(1024) InputFile - - - "Name of the input file; remove if there is no file" -
typedef      ^              ^      IntKi  num_elem - - -  "number of spectral elements spanning length" -
typedef      ^              ^       ^     order    - - -  "order of spectral elements; order+1 nodes per element" -

# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BDyn InitOutputType Reki DummyInitVar - - - "A variable" -

# ..... States ....................................................................................................................
# Define continuous (differentiable) states here:
typedef BeamDyn ContinuousStateType ReKi Nu        {:} - -  "nodal displacements and rotations" - 
typedef      ^         ^             ^   Nv        {:} - -  "nodal linear and angular velocities" -

# Define discrete (nondifferentiable) states here:
typedef BeamDyn/BDyn BDyn_DiscreteStateType ReKi DummyDiscState - - - "A variable, Replace if you have discrete states" -

# Define constraint states here:
typedef BeamDyn/BDyn ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
typedef BeamDyn/BDyn OtherStateType BDyn_ContinuousStateType  xdot  {:} - - "previous state derivs for m-step time integrator"  -
typedef      ^             ^        IntKi n   - - - "tracks time step for which OtherState was updated last" -

# ..... Parameters ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:
typedef BeamDyn ParameterType Reki S {:}{:}{:} "beam stiffness constants" -
typedef   ^          ^          ^  M {:}{:}{:} "beam mass constants" -
typedef   ^          ^        IntKi num_elem - - - "number of elements" -
typedef   ^          ^          ^   order    - - - "polynomial order of spectral elements"
typedef   ^          ^          ^   dof_node - - - "dof per node (6)" -
typedef   ^          ^          ^   num_dof  - - - "total dof" -
typedef   ^          ^        Reki gll_w {:} - - "gauss-legendre-lobatto weights" -
typedef   ^          ^          ^  gll_p {:} - - "gauss-legendre-lobatto points" -
typedef   ^          ^          ^  gll_deriv {:}{:} - "gll derivative matrix" -

# ..... Inputs ....................................................................................................................
# Define inputs that are not on this mesh here:
BeamDyn/BDyn    OutputType  MeshType  PointMesh - - - "" -

# ..... Outputs ...................................................................................................................
# Define outputs that are contained on the mesh here:
BeamDyn/BDyn    OutputType  MeshType  PointMesh - - - "" -
