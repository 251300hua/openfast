##################################################################################################################################
# Registry for BeamDyn, creates MODULE BeamDyn_Types
# Module BeamDyn_Types contains all of the user-defined types needed in BeamDyn. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################

# ..... Initialization data .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BDyn InitInputType CHARACTER(1024) InputFile - - - "Name of the input file; remove if there is no file" -


# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BDyn InitOutputType Reki DummyInitVar - - - "A variable" -

# ..... States ....................................................................................................................
# Define continuous (differentiable) states here:
typedef BeamDyn ContinuousStateType ReKi uuNf      {:} - -  "nodal displacements and rotations" - 

# Define discrete (nondifferentiable) states here:
typedef BeamDyn/BDyn BDyn_DiscreteStateType ReKi DummyDiscState - - - "A variable, Replace if you have discrete states" -

# Define constraint states here:
typedef BeamDyn/BDyn ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
typedef BeamDyn/BDyn OtherStateType BDyn_ContinuousStateType  xdot  {:} - - "previous state derivs for m-step time integrator"  -
typedef      ^             ^        IntKi n   - - - "tracks time step for which OtherState was updated last" -
typedef BeamDyn/BDyn OtherStateType ReKi uuNf     {:} - - "Nodal displacements and rotations" -
typedef BeamDyn/BDyn OtherStateType ReKi uuNi     {:} - - "Initial nodal displacements and rotations at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi vvNi     {:} - - "Initial nodal linear and angular velocities at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi vvNf     {:} - - "Final nodal linear and angular velocities at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi aaNi     {:} - - "Initial nodal linear and angular accelerations at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi aaNf     {:} - - "Final nodal linear and angular accelerations at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi xxNi     {:} - - "Initial nodal algorithmic accelerations at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi xxNf     {:} - - "Final nodal algorithmic accelerations at a time step" -
typedef BeamDyn/BDyn OtherStateType ReKi RootForce     {:} - - "Nodal displacements and rotations" -
# ..... Parameters ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:
typedef BeamDyn/BDyn ParameterType Reki Stif0 {:}{:}{:}  - "beam stiffness constants" -
typedef   ^          ^          ^  M {:}{:}{:} - "beam mass constants" -
typedef   ^          ^        IntKi elem_total - - - "number of elements" -
typedef   ^          ^          ^   dof_node - - - "dof per node (6)" -
typedef   ^          ^          ^   node_total - - - "number of nodes" -
typedef   ^          ^          ^   dof_total  - - - "total dof" -
typedef   ^          ^          ^   node_elem  - - - "total dof" -
typedef   ^          ^          ^   niter  - - - "total dof" -
typedef   ^          ^          ^   ngp  - - - "number of Gauss points" -
typedef   ^          ^        Reki uuN0 {:} - - "reference position vector" -
typedef   ^          ^          ^  bc {:} - - "Boundary condition vector" -
#typedef   ^          ^         ^  F_ext {:} - - "Applied force vector" -
typedef   ^          ^          ^  m00 {:} - - "Mass per unit span" -
typedef   ^          ^          ^  mEta0 {:}{:} - "Mass * Section center location" -
typedef   ^          ^          ^  rho0 {:}{:}{:} "Sectional tensor of inertia" -

# ..... Inputs ....................................................................................................................
# Define inputs that are not on this mesh here:
typedef BeamDyn/BDyn    InputType  MeshType  PointMesh - - - "" -

# ..... Outputs ...................................................................................................................
# Define outputs that are contained on the mesh here:
typedef BeamDyn/BDyn    OutputType  MeshType  PointMesh - - - "" -
