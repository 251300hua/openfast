/**
 * ====================================================================================================
 *                              Node.cpp
 * ====================================================================================================
 *	     
 * Copyright Sept. 2012
 * 
 * Author: Marco D. Masciola, 
 * National Renewable Energy Laboratory, Golden, Colorado, USA
 *
 * This file is part of the Mooring Analysis Program (MAP).
 *
 * MAP is free software: you can redistribute it and/or modify it under the terms 
 * of the GNU General Public License as published by the Free Software Foundation, 
 * either version 3 of the License, or (at your option) any later version.
 *
 * MAP is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with MAP. If not, see:
 * 
 * < http://www.gnu.org/licenses/>
 * ====================================================================================================
 */


#include "Node.h"


/**
 * ============================================================================ 
 * setVarType
 *
 * ============================================================================
 */
void Node::setVarType( const std::string &in , const std::string &type , int i , 
                       VarType Node::* ptr   , MAP_ErrStat &Error      , MAP_Message &Msg ) {

    ((*this).*ptr).name = type; // set the name of the VarType 
    ((*this).*ptr).index = i+1; // set the index number of the VarType
    VarType::setGenericVarType( ((*this).*ptr) , in, Error, Msg ); 
};


/**
 * ============================================================================
 * setSumForceToZero >
 *
 * Initialize sum_FX, sum_FY, sum_FZ to 0.
 * ============================================================================ 
 */
void Node::setSumForceToZero( ){
    this->sum_FX = 0.0;
    this->sum_FY = 0.0;
    this->sum_FZ = 0.0;
};


/**
 * ============================================================================
 * initializeNode 
 *
 * This sets the initial conditions for the Fix and Vessel nodes. This adds 
 * sum_FX, sum_FY and sum_FZ into the node
 * ============================================================================
 */
void Node::initializeNode( ){
    // if the fairlead if fixed or attached to a vessel, do this:
    // Note that a 'Connect' node is not a part of this process because
    // it is assumed the connect node has known FX, FY and FZ applied forces
    if( this->getNodeType()==Fix || this->getNodeType()==Vessel ){
        this->FX.value = sum_FX;
        this->FY.value = sum_FY;
        this->FZ.value = sum_FZ + this->M.value*grav - this->B.value*grav*sea_density;
    };//END if
};


/**
 * ====================================================================================================
 * setEquilibriumDisplacement
 *
 * Sets the equilibrium displacement of each node after the first Solve call
 * ====================================================================================================
 */
void Node::setEquilibriumDisplacement( ) {
    if ( this->type == Vessel ){
        this->setPriorXValue( );  
        this->setPriorYValue( );  
        this->setPriorZValue( );  
    };//END if
};


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getSum_FX( ) const 
{ 
  return this->sum_FX; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getSum_FY( ) const 
{
  return this->sum_FY;
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getSum_FZ( ) const 
{
  return this->sum_FZ;  
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getFX( ) const 
{
  return this->FX.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getFY( ) const 
{
  return this->FY.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getFZ( ) const 
{ 
  return this->FZ.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getM( ) const 
{ 
  return this->M.value; 
} 


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getB( ) const 
{ 
  return this->B.value; 
} 


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getGrav( ) const 
{ 
  return this->grav;
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getSeaDensity( ) const 
{
  return this->sea_density;
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getPtrValue( VarType Node::* ptr ) const   
{
  return (this->*ptr).value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
void Node::
setPtrValue( VarType Node::* ptr , 
             double          T ) 
{ 
  (this->*ptr).value = T;    
}


/**
 * ====================================================================================================
 * get the node as a Fix, Vessel or Connect
 *
 * ====================================================================================================
 */
NodeType Node::
getNodeType( ) const 
{ 
  return this->type; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
void Node::
setPriorXValue( )       
{ 
  this->prior_value_x = this->X.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
void Node::
setPriorYValue( ) 
{ 
  this->prior_value_y = this->Y.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
void Node::
setPriorZValue( )       
{ 
  this->prior_value_z = this->Z.value; 
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getPriorXValue( ) const 
{ 
  return this->prior_value_x;          
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getPriorYValue( ) const 
{ 
  return this->prior_value_y;          
}


/**
 * ====================================================================================================
 * 
 *
 * ====================================================================================================
 */
double Node::
getPriorZValue( ) const 
{ 
  return this->prior_value_z;          
}
   

/**
 * ====================================================================================================
 * set the 'solve_i_Newton_equation' boolean. This idicates if we are solving the
 * Newton equation to enforce static equilibrium for this node.
 *
 * ====================================================================================================
 */
void Node::
setXNewtonEquationFlag( bool T )
{ 
  this->solve_X_Newton_equation = T; 
}


/**
 * ====================================================================================================
 * set the 'solve_i_Newton_equation' boolean. This idicates if we are solving the
 * Newton equation to enforce static equilibrium for this node.
 *
 * ====================================================================================================
 */
void Node::
setYNewtonEquationFlag( bool T )
{ 
  this->solve_Y_Newton_equation = T; 
}


/**
 * ====================================================================================================
 * set the 'solve_i_Newton_equation' boolean. This idicates if we are solving the
 * Newton equation to enforce static equilibrium for this node.
 *
 * ====================================================================================================
 */
void Node::
setZNewtonEquationFlag( bool T ) 
{
  this->solve_Z_Newton_equation = T; 
}


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
bool Node::
getXNewtonEquationFlag( ) const 
{
  return this->solve_X_Newton_equation; 
}


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
bool Node::
getYNewtonEquationFlag( ) const
{
  return this->solve_Y_Newton_equation; 
}


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
bool Node::
getZNewtonEquationFlag( ) const 
{
  return this->solve_Z_Newton_equation; 
}


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
void Node::
addToSumFX( double fx ) 
{ 
  sum_FX += fx;
}


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
void Node::
addToSumFY( double fy )
{
  sum_FY += fy;
};


/**
 * ====================================================================================================
 *
 * ====================================================================================================
 */
void Node::
addToSumFZ( double fz ) 
{ 
  sum_FZ += fz;
 };
